// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vacation_protocols.proto
#ifndef GRPC_vacation_5fprotocols_2eproto__INCLUDED
#define GRPC_vacation_5fprotocols_2eproto__INCLUDED

#include "vacation_protocols.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

// Сервисы для моделей данных
class VacationsService final {
 public:
  static constexpr char const* service_full_name() {
    return "VacationsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Получить всех работников вместе с отпусками
    virtual ::grpc::Status GetAllEmployeers(::grpc::ClientContext* context, const ::GetAllEmployeersRequest& request, ::GetAllEmployeersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetAllEmployeersResponse>> AsyncGetAllEmployeers(::grpc::ClientContext* context, const ::GetAllEmployeersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetAllEmployeersResponse>>(AsyncGetAllEmployeersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetAllEmployeersResponse>> PrepareAsyncGetAllEmployeers(::grpc::ClientContext* context, const ::GetAllEmployeersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetAllEmployeersResponse>>(PrepareAsyncGetAllEmployeersRaw(context, request, cq));
    }
    // Получить список отпусков для определенного работника
    virtual ::grpc::Status GetVacationsByEmployee(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest& request, ::GetVacationsByEmployeeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetVacationsByEmployeeResponse>> AsyncGetVacationsByEmployee(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetVacationsByEmployeeResponse>>(AsyncGetVacationsByEmployeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetVacationsByEmployeeResponse>> PrepareAsyncGetVacationsByEmployee(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetVacationsByEmployeeResponse>>(PrepareAsyncGetVacationsByEmployeeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Получить всех работников вместе с отпусками
      virtual void GetAllEmployeers(::grpc::ClientContext* context, const ::GetAllEmployeersRequest* request, ::GetAllEmployeersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllEmployeers(::grpc::ClientContext* context, const ::GetAllEmployeersRequest* request, ::GetAllEmployeersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Получить список отпусков для определенного работника
      virtual void GetVacationsByEmployee(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest* request, ::GetVacationsByEmployeeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetVacationsByEmployee(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest* request, ::GetVacationsByEmployeeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetAllEmployeersResponse>* AsyncGetAllEmployeersRaw(::grpc::ClientContext* context, const ::GetAllEmployeersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetAllEmployeersResponse>* PrepareAsyncGetAllEmployeersRaw(::grpc::ClientContext* context, const ::GetAllEmployeersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetVacationsByEmployeeResponse>* AsyncGetVacationsByEmployeeRaw(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetVacationsByEmployeeResponse>* PrepareAsyncGetVacationsByEmployeeRaw(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetAllEmployeers(::grpc::ClientContext* context, const ::GetAllEmployeersRequest& request, ::GetAllEmployeersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetAllEmployeersResponse>> AsyncGetAllEmployeers(::grpc::ClientContext* context, const ::GetAllEmployeersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetAllEmployeersResponse>>(AsyncGetAllEmployeersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetAllEmployeersResponse>> PrepareAsyncGetAllEmployeers(::grpc::ClientContext* context, const ::GetAllEmployeersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetAllEmployeersResponse>>(PrepareAsyncGetAllEmployeersRaw(context, request, cq));
    }
    ::grpc::Status GetVacationsByEmployee(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest& request, ::GetVacationsByEmployeeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetVacationsByEmployeeResponse>> AsyncGetVacationsByEmployee(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetVacationsByEmployeeResponse>>(AsyncGetVacationsByEmployeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetVacationsByEmployeeResponse>> PrepareAsyncGetVacationsByEmployee(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetVacationsByEmployeeResponse>>(PrepareAsyncGetVacationsByEmployeeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetAllEmployeers(::grpc::ClientContext* context, const ::GetAllEmployeersRequest* request, ::GetAllEmployeersResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAllEmployeers(::grpc::ClientContext* context, const ::GetAllEmployeersRequest* request, ::GetAllEmployeersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetVacationsByEmployee(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest* request, ::GetVacationsByEmployeeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetVacationsByEmployee(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest* request, ::GetVacationsByEmployeeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::GetAllEmployeersResponse>* AsyncGetAllEmployeersRaw(::grpc::ClientContext* context, const ::GetAllEmployeersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetAllEmployeersResponse>* PrepareAsyncGetAllEmployeersRaw(::grpc::ClientContext* context, const ::GetAllEmployeersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetVacationsByEmployeeResponse>* AsyncGetVacationsByEmployeeRaw(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetVacationsByEmployeeResponse>* PrepareAsyncGetVacationsByEmployeeRaw(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllEmployeers_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVacationsByEmployee_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Получить всех работников вместе с отпусками
    virtual ::grpc::Status GetAllEmployeers(::grpc::ServerContext* context, const ::GetAllEmployeersRequest* request, ::GetAllEmployeersResponse* response);
    // Получить список отпусков для определенного работника
    virtual ::grpc::Status GetVacationsByEmployee(::grpc::ServerContext* context, const ::GetVacationsByEmployeeRequest* request, ::GetVacationsByEmployeeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllEmployeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllEmployeers() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAllEmployeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllEmployeers(::grpc::ServerContext* /*context*/, const ::GetAllEmployeersRequest* /*request*/, ::GetAllEmployeersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllEmployeers(::grpc::ServerContext* context, ::GetAllEmployeersRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetAllEmployeersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVacationsByEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetVacationsByEmployee() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetVacationsByEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVacationsByEmployee(::grpc::ServerContext* /*context*/, const ::GetVacationsByEmployeeRequest* /*request*/, ::GetVacationsByEmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVacationsByEmployee(::grpc::ServerContext* context, ::GetVacationsByEmployeeRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetVacationsByEmployeeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAllEmployeers<WithAsyncMethod_GetVacationsByEmployee<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetAllEmployeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllEmployeers() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::GetAllEmployeersRequest, ::GetAllEmployeersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GetAllEmployeersRequest* request, ::GetAllEmployeersResponse* response) { return this->GetAllEmployeers(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllEmployeers(
        ::grpc::MessageAllocator< ::GetAllEmployeersRequest, ::GetAllEmployeersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetAllEmployeersRequest, ::GetAllEmployeersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllEmployeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllEmployeers(::grpc::ServerContext* /*context*/, const ::GetAllEmployeersRequest* /*request*/, ::GetAllEmployeersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllEmployeers(
      ::grpc::CallbackServerContext* /*context*/, const ::GetAllEmployeersRequest* /*request*/, ::GetAllEmployeersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetVacationsByEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetVacationsByEmployee() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::GetVacationsByEmployeeRequest, ::GetVacationsByEmployeeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GetVacationsByEmployeeRequest* request, ::GetVacationsByEmployeeResponse* response) { return this->GetVacationsByEmployee(context, request, response); }));}
    void SetMessageAllocatorFor_GetVacationsByEmployee(
        ::grpc::MessageAllocator< ::GetVacationsByEmployeeRequest, ::GetVacationsByEmployeeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetVacationsByEmployeeRequest, ::GetVacationsByEmployeeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetVacationsByEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVacationsByEmployee(::grpc::ServerContext* /*context*/, const ::GetVacationsByEmployeeRequest* /*request*/, ::GetVacationsByEmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetVacationsByEmployee(
      ::grpc::CallbackServerContext* /*context*/, const ::GetVacationsByEmployeeRequest* /*request*/, ::GetVacationsByEmployeeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetAllEmployeers<WithCallbackMethod_GetVacationsByEmployee<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAllEmployeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllEmployeers() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAllEmployeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllEmployeers(::grpc::ServerContext* /*context*/, const ::GetAllEmployeersRequest* /*request*/, ::GetAllEmployeersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVacationsByEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetVacationsByEmployee() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetVacationsByEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVacationsByEmployee(::grpc::ServerContext* /*context*/, const ::GetVacationsByEmployeeRequest* /*request*/, ::GetVacationsByEmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllEmployeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllEmployeers() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAllEmployeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllEmployeers(::grpc::ServerContext* /*context*/, const ::GetAllEmployeersRequest* /*request*/, ::GetAllEmployeersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllEmployeers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVacationsByEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetVacationsByEmployee() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetVacationsByEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVacationsByEmployee(::grpc::ServerContext* /*context*/, const ::GetVacationsByEmployeeRequest* /*request*/, ::GetVacationsByEmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVacationsByEmployee(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllEmployeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllEmployeers() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllEmployeers(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllEmployeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllEmployeers(::grpc::ServerContext* /*context*/, const ::GetAllEmployeersRequest* /*request*/, ::GetAllEmployeersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllEmployeers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetVacationsByEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetVacationsByEmployee() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetVacationsByEmployee(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetVacationsByEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVacationsByEmployee(::grpc::ServerContext* /*context*/, const ::GetVacationsByEmployeeRequest* /*request*/, ::GetVacationsByEmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetVacationsByEmployee(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllEmployeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllEmployeers() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetAllEmployeersRequest, ::GetAllEmployeersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetAllEmployeersRequest, ::GetAllEmployeersResponse>* streamer) {
                       return this->StreamedGetAllEmployeers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllEmployeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllEmployeers(::grpc::ServerContext* /*context*/, const ::GetAllEmployeersRequest* /*request*/, ::GetAllEmployeersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllEmployeers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetAllEmployeersRequest,::GetAllEmployeersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVacationsByEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetVacationsByEmployee() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetVacationsByEmployeeRequest, ::GetVacationsByEmployeeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetVacationsByEmployeeRequest, ::GetVacationsByEmployeeResponse>* streamer) {
                       return this->StreamedGetVacationsByEmployee(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetVacationsByEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVacationsByEmployee(::grpc::ServerContext* /*context*/, const ::GetVacationsByEmployeeRequest* /*request*/, ::GetVacationsByEmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVacationsByEmployee(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetVacationsByEmployeeRequest,::GetVacationsByEmployeeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAllEmployeers<WithStreamedUnaryMethod_GetVacationsByEmployee<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAllEmployeers<WithStreamedUnaryMethod_GetVacationsByEmployee<Service > > StreamedService;
};


#endif  // GRPC_vacation_5fprotocols_2eproto__INCLUDED
