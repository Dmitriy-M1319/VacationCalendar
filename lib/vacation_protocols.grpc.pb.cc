// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vacation_protocols.proto

#include "vacation_protocols.pb.h"
#include "vacation_protocols.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* VacationsService_method_names[] = {
  "/VacationsService/GetAllEmployeers",
  "/VacationsService/GetVacationsByEmployee",
};

std::unique_ptr< VacationsService::Stub> VacationsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VacationsService::Stub> stub(new VacationsService::Stub(channel, options));
  return stub;
}

VacationsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetAllEmployeers_(VacationsService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVacationsByEmployee_(VacationsService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VacationsService::Stub::GetAllEmployeers(::grpc::ClientContext* context, const ::GetAllEmployeersRequest& request, ::GetAllEmployeersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetAllEmployeersRequest, ::GetAllEmployeersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllEmployeers_, context, request, response);
}

void VacationsService::Stub::async::GetAllEmployeers(::grpc::ClientContext* context, const ::GetAllEmployeersRequest* request, ::GetAllEmployeersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetAllEmployeersRequest, ::GetAllEmployeersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllEmployeers_, context, request, response, std::move(f));
}

void VacationsService::Stub::async::GetAllEmployeers(::grpc::ClientContext* context, const ::GetAllEmployeersRequest* request, ::GetAllEmployeersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllEmployeers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetAllEmployeersResponse>* VacationsService::Stub::PrepareAsyncGetAllEmployeersRaw(::grpc::ClientContext* context, const ::GetAllEmployeersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GetAllEmployeersResponse, ::GetAllEmployeersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllEmployeers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GetAllEmployeersResponse>* VacationsService::Stub::AsyncGetAllEmployeersRaw(::grpc::ClientContext* context, const ::GetAllEmployeersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllEmployeersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VacationsService::Stub::GetVacationsByEmployee(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest& request, ::GetVacationsByEmployeeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetVacationsByEmployeeRequest, ::GetVacationsByEmployeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVacationsByEmployee_, context, request, response);
}

void VacationsService::Stub::async::GetVacationsByEmployee(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest* request, ::GetVacationsByEmployeeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetVacationsByEmployeeRequest, ::GetVacationsByEmployeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVacationsByEmployee_, context, request, response, std::move(f));
}

void VacationsService::Stub::async::GetVacationsByEmployee(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest* request, ::GetVacationsByEmployeeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVacationsByEmployee_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetVacationsByEmployeeResponse>* VacationsService::Stub::PrepareAsyncGetVacationsByEmployeeRaw(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GetVacationsByEmployeeResponse, ::GetVacationsByEmployeeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVacationsByEmployee_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GetVacationsByEmployeeResponse>* VacationsService::Stub::AsyncGetVacationsByEmployeeRaw(::grpc::ClientContext* context, const ::GetVacationsByEmployeeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVacationsByEmployeeRaw(context, request, cq);
  result->StartCall();
  return result;
}

VacationsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VacationsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VacationsService::Service, ::GetAllEmployeersRequest, ::GetAllEmployeersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VacationsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetAllEmployeersRequest* req,
             ::GetAllEmployeersResponse* resp) {
               return service->GetAllEmployeers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VacationsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VacationsService::Service, ::GetVacationsByEmployeeRequest, ::GetVacationsByEmployeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VacationsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetVacationsByEmployeeRequest* req,
             ::GetVacationsByEmployeeResponse* resp) {
               return service->GetVacationsByEmployee(ctx, req, resp);
             }, this)));
}

VacationsService::Service::~Service() {
}

::grpc::Status VacationsService::Service::GetAllEmployeers(::grpc::ServerContext* context, const ::GetAllEmployeersRequest* request, ::GetAllEmployeersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VacationsService::Service::GetVacationsByEmployee(::grpc::ServerContext* context, const ::GetVacationsByEmployeeRequest* request, ::GetVacationsByEmployeeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


